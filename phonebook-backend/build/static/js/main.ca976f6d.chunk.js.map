{"version":3,"sources":["services/persons.js","components/Notification.js","components/Filter.js","components/Persons.js","components/PersonForm.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","Notification","message","className","Filter","input","onChange","value","Person","person","deleteAction","key","name","number","onClick","Persons","newFilter","persons","filter","toLowerCase","includes","map","i","PersonForm","newName","setNewName","newNumber","setNewNumber","addPerson","onSubmit","event","target","type","App","useState","setPersons","setNewFilter","successMessage","setSuccessMessage","useEffect","personsService","allPersons","console","log","preventDefault","nameIdx","findIndex","newPerson","setTimeout","concat","alert","window","confirm","thisPerson","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ca976f6d.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id, newObject) => {\n    const request = axios.delete(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\n\n\nexport default { getAll, create, update, remove }","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"success\">\n        {message}\n      </div>\n    )\n  }\n\nexport default Notification","import React from 'react'\n\nconst Filter = ({ input, onChange }) => {\n    return (\n        <div>\n        filter shown with <input value={input} onChange={onChange} />\n        </div>\n    )\n}\n\nexport default Filter","import React from 'react';\nimport personsService from '../services/persons'\n\nconst Person = ({ person, deleteAction }) => {\n    return (<div key={person.name}>{person.name} {person.number} <button onClick={deleteAction}>delete</button></div>)\n}\n\nconst Persons = ({ newFilter, persons, deleteAction }) => {\n  const showPersons = newFilter == \"\" ? persons : persons.filter(person => person.name.toLowerCase().includes(newFilter.toLowerCase()));\n  return (showPersons.map((person, i) => <Person key={i} person={person} deleteAction={() => deleteAction(person) } />));\n};\n\nexport default Persons","import React, { useState, useEffect } from 'react'\n\n// WHY CANNOT EXPORT\nconst PersonForm = ({\n    newName, \n    setNewName, \n    newNumber, \n    setNewNumber, \n    addPerson\n  }) => {\n    const handleNameChange = (event) => {\n      setNewName(event.target.value)\n    }\n  \n    const handleNumberChange = (event) => {\n      setNewNumber(event.target.value)\n    }\n  \n    return (\n      <form onSubmit={addPerson}>\n      <div>\n        name: <input value={newName} onChange={handleNameChange}/>\n      </div>\n      <div>number: <input value={newNumber} onChange={handleNumberChange} /></div>\n  \n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n    )\n  }\n  export default PersonForm","import React, { useState, useEffect } from 'react'\n\nimport personsService from './services/persons'\nimport Notification from './components/Notification'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\n\nimport './index.css'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [successMessage, setSuccessMessage] = useState(null)\n\n  const hook = () => {\n    personsService.getAll()\n      .then(allPersons => {\n        setPersons(allPersons)\n      })\n  }\n\n  useEffect(hook, [])\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setNewFilter(event.target.value)\n  }\n\n  const deleteAction = (person) => {\n    console.log(person)\n    let result = window.confirm(`Delete ${person.name} ?`)\n\n    if (result) {\n      personsService\n        .remove(person.id, person)\n        .then(() => {\n          setPersons(persons.filter(thisPerson => thisPerson.id !== person.id))\n        })\n    }\n\n\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    let nameIdx = persons.findIndex(i => i.name === newName);\n    console.log(persons)\n    if (nameIdx === -1) {\n      const newPerson = {\n        name: newName,\n        number: newNumber\n      }\n\n      personsService\n        .create(newPerson)\n        .then(newPerson => {\n          setSuccessMessage(\n            `Added ${newPerson.name}`\n          )\n          setTimeout(() => {\n            setSuccessMessage(null)\n          }, 5000)\n\n          setPersons(persons.concat(newPerson))\n        })\n\n    } else {\n      alert(`${newName} is already added to phonebook`)\n    }\n\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={successMessage} />\n      <Filter input={newFilter} onChange={handleFilterChange} />\n\n      <h2>Add a new</h2>\n\n      <PersonForm\n        newName={newName}\n        setNewName={setNewName}\n        newNumber={newNumber}\n        setNewNumber={setNewNumber}\n        addPerson={addPerson}\n      />\n      <h2>Numbers</h2>\n      <Persons newFilter={newFilter} persons={persons} deleteAction={deleteAction} />\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}